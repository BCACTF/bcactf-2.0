p = 2118785735523620955301512231868734231925640292462405499978976981762557161416662496081983014179663
q = 1243737700428927574598968208586995066861594665591025213691894901887737529628559457923362470874703
n = p * q
e = 3
N = 31

"""
while 0 == 0:
	p = random_prime(2^320,false,2^319)
	if gcd(p-1, 3) == 1:
		print(p)
"""

# m = 16650268167349017075712368193348405241445553046671883164411792426376260166472905970735181931709248070674188695092296059614422141

R = Zmod(n)
MS = MatrixSpace(R, N, N)
"""
S = SymmetricGroup(N)
t = 0
while t < 2000:
	s = S.random_element()
	t = s.order()
	print(t)
print(s)
"""
s = PermutationGroupElement('(1,8,18)(2,24,14,22,25,6,9,13,31,15,21)(3,16,27,26,12,10,7,5,20,23)(4,29,28,11,19,17,30)')
P = MS(s.matrix())
with seed(1): C = MS([randrange(100) for i in range(N*N)])
G = C * P * C^-1

def encrypt(m):
	M = m * G
	return (M^e).list()